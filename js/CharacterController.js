!function (t, i) { if ("object" == typeof exports && "object" == typeof module) module.exports = i(require("babylonjs")); else if ("function" == typeof define && define.amd) define(["babylonjs"], i); else { var s = "object" == typeof exports ? i(require("babylonjs")) : i(t.BABYLON); for (var h in s) ("object" == typeof exports ? exports : t)[h] = s[h] } }(window, function (t) { return function (t) { var i = {}; function s(h) { if (i[h]) return i[h].exports; var n = i[h] = { i: h, l: !1, exports: {} }; return t[h].call(n.exports, n, n.exports, s), n.l = !0, n.exports } return s.m = t, s.c = i, s.d = function (t, i, h) { s.o(t, i) || Object.defineProperty(t, i, { enumerable: !0, get: h }) }, s.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "h", { value: !0 }) }, s.t = function (t, i) { if (1 & i && (t = s(t)), 8 & i) return t; if (4 & i && "object" == typeof t && t && t.h) return t; var h = Object.create(null); if (s.r(h), Object.defineProperty(h, "default", { enumerable: !0, value: t }), 2 & i && "string" != typeof t) for (var n in t) s.d(h, n, function (i) { return t[i] }.bind(null, n)); return h }, s.n = function (t) { var i = t && t.h ? function () { return t.default } : function () { return t }; return s.d(i, "a", i), i }, s.o = function (t, i) { return Object.prototype.hasOwnProperty.call(t, i) }, s.p = "", s(s.s = 1) }([function (i, s) { i.exports = t }, function (t, i, s) { "use strict"; s.r(i), s.d(i, "CharacterController", function () { return n }), s.d(i, "AnimData", function () { return u }), s.d(i, "Key", function () { return e }); var h = s(0), n = function () { function t(t, i, s) { var n = this; this.walkSpeed = 3, this.runSpeed = 2 * this.walkSpeed, this.backSpeed = this.walkSpeed / 2, this.jumpSpeed = 2 * this.walkSpeed, this.leftSpeed = this.walkSpeed / 2, this.rightSpeed = this.walkSpeed / 2, this.gravity = 9.8, this.minSlopeLimit = 30, this.maxSlopeLimit = 45, this.sl = Math.PI * this.minSlopeLimit / 180, this.sl2 = Math.PI * this.maxSlopeLimit / 180, this.u = .25, this.v = 0, this.j = new h.Vector3(0, 0, 0), this.walk = new u("walk"), this.walkBack = new u("walkBack"), this.idle = new u("idle"), this.idleJump = new u("idleJump"), this.run = new u("run"), this.runJump = new u("runJump"), this.fall = new u("fall"), this.turnLeft = new u("turnLeft"), this.turnRight = new u("turnRight"), this.strafeLeft = new u("strafeLeft"), this.strafeRight = new u("strafeRight"), this.slideBack = new u("slideBack"), this.anims = [this.walk, this.walkBack, this.idle, this.run, this.runJump, this.fall, this.turnLeft, this.turnRight, this.strafeLeft, this.strafeRight, this.slideBack], this.walkKey = "W", this.walkBackKey = "S", this.turnLeftKey = "A", this.turnRightKey = "D", this.strafeLeftKey = "Q", this.strafeRightKey = "E", this.jumpKey = "32", this.walkCode = 38, this.walkBackCode = 40, this.turnLeftCode = 37, this.turnRightCode = 39, this.strafeLeftCode = 0, this.strafeRightCode = 0, this.jumpCode = 32, this.elasticCamera = !0, this.cameraTarget = new h.Vector3(0, 0, 0), this.noFirstPerson = !1, this.started = !1, this.M = !1, this.prevAnim = null, this.avStartPos = new h.Vector3(0, 0, 0), this.grounded = !1, this.freeFallDist = 0, this.fallFrameCountMin = 50, this.fallFrameCount = 0, this.inFreeFall = !1, this.wasWalking = !1, this.wasRunning = !1, this.jumpStartPosY = 0, this.jumpTime = 0, this.movFallTime = 0, this.idleFallTime = 0, this.groundFrameCount = 0, this.groundFrameMax = 10, this.savedCameraCollision = !0, this.ray = new h.Ray(h.Vector3.Zero(), h.Vector3.One(), 1), this.rayDir = h.Vector3.Zero(), this.cameraSkin = .5, this.skip = 0, this.move = !1, this.avatar = t, this.scene = s, this.k = this.avatar.ellipsoid.clone(), this.skeleton = t.skeleton, null != this.skeleton && this.checkAnims(this.skeleton), this.camera = i, this.savedCameraCollision = this.camera.checkCollisions, this.key = new e, this.renderer = function () { n.moveAVandCamera() }, this.handleKeyUp = function (t) { n.onKeyUp(t) }, this.handleKeyDown = function (t) { n.onKeyDown(t) }, window.addEventListener("keyup", this.handleKeyUp, !1), window.addEventListener("keydown", this.handleKeyDown, !1) } return t.prototype.setAvatar = function (t) { this.avatar = t }, t.prototype.setAvatarSkeleton = function (t) { this.skeleton = t, this.checkAnims(t) }, t.prototype.setSlopeLimit = function (t, i) { this.minSlopeLimit = t, this.maxSlopeLimit = i, this.sl = Math.PI * t / 180, this.sl2 = Math.PI * this.maxSlopeLimit / 180 }, t.prototype.setStepOffset = function (t) { this.u = t }, t.prototype.setWalkSpeed = function (t) { this.walkSpeed = t }, t.prototype.setRunSpeed = function (t) { this.runSpeed = t }, t.prototype.setBackSpeed = function (t) { this.backSpeed = t }, t.prototype.setJumpSpeed = function (t) { this.jumpSpeed = t }, t.prototype.setLeftSpeed = function (t) { this.leftSpeed = t }, t.prototype.setRightSpeed = function (t) { this.rightSpeed = t }, t.prototype.setGravity = function (t) { this.gravity = t }, t.prototype.setAnim = function (t, i, s, h) { null != this.skeleton && (t.name = i, t.rate = s, t.loop = h, null != this.skeleton.getAnimationRange(t.name) ? t.exist = !0 : t.exist = !1) }, t.prototype.setWalkAnim = function (t, i, s) { this.setAnim(this.walk, t, i, s) }, t.prototype.setRunAnim = function (t, i, s) { this.setAnim(this.run, t, i, s) }, t.prototype.setWalkBackAnim = function (t, i, s) { this.setAnim(this.walkBack, t, i, s) }, t.prototype.setSlideBackAnim = function (t, i, s) { this.setAnim(this.slideBack, t, i, s) }, t.prototype.setIdleAnim = function (t, i, s) { this.setAnim(this.idle, t, i, s) }, t.prototype.setTurnRightAnim = function (t, i, s) { this.setAnim(this.turnRight, t, i, s) }, t.prototype.setTurnLeftAnim = function (t, i, s) { this.setAnim(this.turnLeft, t, i, s) }, t.prototype.setStrafeRightAnim = function (t, i, s) { this.setAnim(this.strafeRight, t, i, s) }, t.prototype.setSrafeLeftAnim = function (t, i, s) { this.setAnim(this.strafeLeft, t, i, s) }, t.prototype.setIdleJumpAnim = function (t, i, s) { this.setAnim(this.idleJump, t, i, s) }, t.prototype.setRunJumpAnim = function (t, i, s) { this.setAnim(this.runJump, t, i, s) }, t.prototype.setFallAnim = function (t, i, s) { this.setAnim(this.fall, t, i, s) }, t.prototype.setWalkKey = function (t) { this.walkKey = t }, t.prototype.setWalkBackKey = function (t) { this.walkBackKey = t }, t.prototype.setTurnLeftKey = function (t) { this.turnLeftKey = t }, t.prototype.setTurnRightKey = function (t) { this.turnRightKey = t }, t.prototype.setStrafeLeftKey = function (t) { this.strafeLeftKey = t }, t.prototype.setStrafeRightKey = function (t) { this.strafeRightKey = t }, t.prototype.setJumpKey = function (t) { this.jumpKey = t }, t.prototype.setWalkCode = function (t) { this.walkCode = t }, t.prototype.setWalkBackCode = function (t) { this.walkBackCode = t }, t.prototype.setTurnLeftCode = function (t) { this.turnLeftCode = t }, t.prototype.setTurnRightCode = function (t) { this.turnRightCode = t }, t.prototype.setStrafeLeftCode = function (t) { this.strafeLeftCode = t }, t.prototype.setStrafeRightCode = function (t) { this.strafeRightCode = t }, t.prototype.setJumpCode = function (t) { this.jumpCode = t }, t.prototype.setCameraElasticity = function (t) { this.elasticCamera = t }, t.prototype.setCameraTarget = function (t) { this.cameraTarget.copyFrom(t) }, t.prototype.cameraCollisionChanged = function () { this.savedCameraCollision = this.camera.checkCollisions }, t.prototype.setNoFirstPerson = function (t) { this.noFirstPerson = t }, t.prototype.checkAnims = function (t) { for (var i = 0, s = this.anims; i < s.length; i++) { var h = s[i]; null != t.getAnimationRange(h.name) && (h.exist = !0) } }, t.prototype.start = function () { this.started || (this.started = !0, this.key.reset(), this.movFallTime = 0, this.idleFallTime = .001, this.grounded = !1, this.updateTargetValue(), this.scene.registerBeforeRender(this.renderer), this.scene) }, t.prototype.stop = function () { this.started && (this.started = !1, this.scene.unregisterBeforeRender(this.renderer), window.removeEventListener("keyup", this.handleKeyUp), window.removeEventListener("keydown", this.handleKeyDown), this.prevAnim = null) }, t.prototype.pauseAnim = function () { this.M = !0 }, t.prototype.resumeAnim = function () { this.M = !1 }, t.prototype.moveAVandCamera = function () { this.avStartPos.copyFrom(this.avatar.position); var t = null, i = this.scene.getEngine().getDeltaTime() / 1e3; this.key.jump && !this.inFreeFall ? (this.grounded = !1, this.idleFallTime = 0, t = this.doJump(i)) : this.anyMovement() || this.inFreeFall ? (this.grounded = !1, this.idleFallTime = 0, t = this.doMove(i)) : this.inFreeFall || (t = this.doIdle(i)), this.M || null != t && null !== this.skeleton && this.prevAnim !== t && (t.exist && this.skeleton.beginAnimation(t.name, t.loop, t.rate), this.prevAnim = t), this.updateTargetValue() }, t.prototype.doJump = function (t) { var i = null; i = this.runJump, 0 === this.jumpTime && (this.jumpStartPosY = this.avatar.position.y); var s = (this.jumpSpeed - this.gravity * this.jumpTime) * t - .5 * this.gravity * t * t; this.jumpTime = this.jumpTime + t; var n, u = 0; if (this.avatar.rotation.y = -4.69 - this.camera.alpha, this.wasRunning || this.wasWalking ? (this.wasRunning ? u = this.runSpeed * t : this.wasWalking && (u = this.walkSpeed * t), (n = this.moveVector.clone()).y = 0, (n = n.normalize()).scaleToRef(u, n), n.y = s) : (n = new h.Vector3(0, s, 0), i = this.idleJump), this.avatar.moveWithCollisions(n), s < 0) if (this.avatar.position.y > this.avStartPos.y || this.avatar.position.y === this.avStartPos.y && n.length() > .001) this.endJump(); else if (this.avatar.position.y < this.jumpStartPosY) { var e = this.avatar.position.subtract(this.avStartPos); this.areVectorsEqual(e, n, .001) || this.verticalSlope(e) <= this.sl && this.endJump() } return i }, t.prototype.endJump = function () { this.key.jump = !1, this.jumpTime = 0, this.wasWalking = !1, this.wasRunning = !1 }, t.prototype.areVectorsEqual = function (t, i, s) { return Math.abs(t.x - i.x) < s && Math.abs(t.y - i.y) < s && Math.abs(t.z - i.z) < s }, t.prototype.verticalSlope = function (t) { return Math.atan(Math.abs(t.y / Math.sqrt(t.x * t.x + t.z * t.z))) }, t.prototype.doMove = function (t) { var i = this.movFallTime * this.gravity; this.freeFallDist = i * t + this.gravity * t * t / 2, this.movFallTime = this.movFallTime + t; var s = !1, h = null; if (this.inFreeFall) this.moveVector.y = -this.freeFallDist, s = !0; else if (this.wasWalking = !1, this.wasRunning = !1, this.key.forward) { var n = 0; this.key.shift ? (this.wasRunning = !0, n = this.runSpeed * t, h = this.run) : (this.wasWalking = !0, n = this.walkSpeed * t, h = this.walk), this.moveVector = this.avatar.calcMovePOV(0, -this.freeFallDist, n), s = !0 } else this.key.backward ? (this.moveVector = this.avatar.calcMovePOV(0, -this.freeFallDist, -this.backSpeed * t), h = this.walkBack, s = !0) : this.key.stepLeft ? (h = this.strafeLeft, this.moveVector = this.avatar.calcMovePOV(-this.leftSpeed * t, -this.freeFallDist, 0), s = !0) : this.key.stepRight && (h = this.strafeRight, this.moveVector = this.avatar.calcMovePOV(this.rightSpeed * t, -this.freeFallDist, 0), s = !0); if (this.key.stepLeft || this.key.stepRight || (this.key.turnLeft ? (this.camera.alpha = this.camera.alpha + .022, s || (this.avatar.rotation.y = -4.69 - this.camera.alpha, h = this.turnLeft)) : this.key.turnRight && (this.camera.alpha = this.camera.alpha - .022, s || (this.avatar.rotation.y = -4.69 - this.camera.alpha, h = this.turnRight))), s && (this.avatar.rotation.y = -4.69 - this.camera.alpha, this.moveVector.length() > .001)) if (this.avatar.moveWithCollisions(this.moveVector), this.avatar.position.y > this.avStartPos.y) { var u = this.avatar.position.subtract(this.avStartPos), e = this.verticalSlope(u); e >= this.sl2 ? this.u > 0 ? (0 == this.v && this.j.copyFrom(this.avStartPos), this.v = this.v + (this.avatar.position.y - this.avStartPos.y), this.v > this.u && (this.v = 0, this.avatar.position.copyFrom(this.j), this.endFreeFall())) : (this.avatar.position.copyFrom(this.avStartPos), this.endFreeFall()) : (this.v = 0, e > this.sl ? (this.fallFrameCount = 0, this.inFreeFall = !1) : this.endFreeFall()) } else if (this.avatar.position.y < this.avStartPos.y) { u = this.avatar.position.subtract(this.avStartPos); this.areVectorsEqual(u, this.moveVector, .001) ? (this.inFreeFall = !0, this.fallFrameCount++, this.fallFrameCount > this.fallFrameCountMin && (h = this.fall)) : this.verticalSlope(u) <= this.sl ? this.endFreeFall() : (this.fallFrameCount = 0, this.inFreeFall = !1) } else this.endFreeFall(); return h }, t.prototype.endFreeFall = function () { this.movFallTime = 0, this.fallFrameCount = 0, this.inFreeFall = !1 }, t.prototype.doIdle = function (t) { if (this.grounded) return this.idle; this.wasWalking = !1, this.wasRunning = !1, this.movFallTime = 0; var i = this.idle; if (this.fallFrameCount = 0, 0 === t) this.freeFallDist = 5; else { var s = this.idleFallTime * this.gravity; this.freeFallDist = s * t + this.gravity * t * t / 2, this.idleFallTime = this.idleFallTime + t } if (this.freeFallDist < .01) return i; var n = new h.Vector3(0, -this.freeFallDist, 0); if (this.avatar.rotation.y = -4.69 - this.camera.alpha, this.avatar.moveWithCollisions(n), this.avatar.position.y > this.avStartPos.y || this.avatar.position.y === this.avStartPos.y) this.groundIt(); else if (this.avatar.position.y < this.avStartPos.y) { var u = this.avatar.position.subtract(this.avStartPos); this.areVectorsEqual(u, n, .001) || (this.verticalSlope(u) <= this.sl ? (this.groundIt(), this.avatar.position.copyFrom(this.avStartPos)) : (this.unGroundIt(), i = this.slideBack)) } return i }, t.prototype.groundIt = function () { this.groundFrameCount++, this.groundFrameCount > this.groundFrameMax && (this.grounded = !0, this.idleFallTime = 0) }, t.prototype.unGroundIt = function () { this.grounded = !1, this.groundFrameCount = 0 }, t.prototype.updateTargetValue = function () { 0 == this.v && this.avatar.position.addToRef(this.cameraTarget, this.camera.target), this.camera.radius > this.camera.lowerRadiusLimit && this.elasticCamera && this.snapCamera(), this.camera.radius <= this.camera.lowerRadiusLimit ? this.noFirstPerson || (this.avatar.visibility = 0, this.camera.checkCollisions = !1) : (this.avatar.visibility = 1, this.camera.checkCollisions = this.savedCameraCollision) }, t.prototype.snapCamera = function () { var t = this; this.camera.position.subtractToRef(this.camera.target, this.rayDir), this.ray.origin = this.camera.target, this.ray.length = this.rayDir.length(), this.ray.direction = this.rayDir.normalize(); var i = this.scene.pickWithRay(this.ray, function (i) { return !(i == t.avatar || !i.checkCollisions) }, !0); if (i.hit) if (this.camera.checkCollisions) { var s = this.camera.target.subtract(i.pickedPoint).normalize().scale(this.cameraSkin); i.pickedPoint.addToRef(s, this.camera.position) } else { var h = i.pickedPoint.subtract(this.camera.target).length(); this.camera.radius = h - this.cameraSkin } }, t.prototype.anyMovement = function () { return this.key.forward || this.key.backward || this.key.turnLeft || this.key.turnRight || this.key.stepLeft || this.key.stepRight }, t.prototype.onKeyDown = function (t) { var i = t.keyCode, s = String.fromCharCode(i); s === this.jumpKey || i === this.jumpCode ? this.key.jump = !0 : 16 === i ? this.key.shift = !0 : s === this.walkKey || i === this.walkCode ? this.key.forward = !0 : s === this.turnLeftKey || i === this.turnLeftCode ? this.key.turnLeft = !0 : s === this.turnRightKey || i === this.turnRightCode ? this.key.turnRight = !0 : s === this.walkBackKey || i === this.walkBackCode ? this.key.backward = !0 : s === this.strafeLeftKey || i === this.strafeLeftCode ? this.key.stepLeft = !0 : s !== this.strafeRightKey && i !== this.strafeRightCode || (this.key.stepRight = !0), this.move = this.anyMovement() }, t.prototype.onKeyUp = function (t) { var i = t.keyCode, s = String.fromCharCode(i); 16 === i ? this.key.shift = !1 : s === this.walkKey || i === this.walkCode ? this.key.forward = !1 : s === this.turnLeftKey || i === this.turnLeftCode ? this.key.turnLeft = !1 : s === this.turnRightKey || i === this.turnRightCode ? this.key.turnRight = !1 : s === this.walkBackKey || i === this.walkBackCode ? this.key.backward = !1 : s === this.strafeLeftKey || i === this.strafeLeftCode ? this.key.stepLeft = !1 : s !== this.strafeRightKey && i !== this.strafeRightCode || (this.key.stepRight = !1), this.move = this.anyMovement() }, t }(), u = function () { return function (t) { this.loop = !0, this.rate = 1, this.exist = !1, this.name = t } }(), e = function () { function t() { this.reset() } return t.prototype.reset = function () { this.forward = !1, this.backward = !1, this.turnRight = !1, this.turnLeft = !1, this.stepRight = !1, this.stepLeft = !1, this.jump = !1, this.shift = !1 }, t }() }]) });
//# sourceMappingURL=CharacterController.js.map